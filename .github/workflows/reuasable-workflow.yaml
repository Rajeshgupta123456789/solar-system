name: Reusable Workflow for Solar System Deployment
on:
    workflow_call:
      secrets:
        mongodb_password:
          required: true
        ngrok_authtoken:
          required: true
      inputs:
        environment:
          description: Deployment environment development or production
          default: development
          required: true
          type: string
        k8s-manifests-path:
          description: Path to Kubernetes manifests
          default: kubernetes/
          required: true
          type: string
        
jobs:
    reusable-workflow:
     environment: ${{ inputs.environment }}
     runs-on: ubuntu-latest
     steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Install minikube
          id: minikube
          uses: medyagh/setup-minikube@latest

        - name: Enable Minikube Addons and wait for Ingress
          run: |
            # Enable required addons
            minikube addons enable ingress
            minikube addons enable ingress-dns
            
            # Wait for ingress controller pod to be ready
            echo "Waiting for ingress-nginx-controller to be ready..."
            kubectl wait --namespace ingress-nginx \
              --for=condition=ready pod \
              --selector=app.kubernetes.io/component=controller \
              --timeout=120s
            
            # Verify ingress-nginx components
            kubectl get all -n ingress-nginx
          
        - name: Get Minikube NodePort IP and Port
          run: |
            # Get the Minikube IP
            MINIKUBE_IP=$(minikube ip)
            echo "Minikube IP: $MINIKUBE_IP"
            
            # Get the NodePort of the ingress controller
            NODE_PORT=$(kubectl -n ingress-nginx get svc ingress-nginx-controller -o jsonpath='{.spec.ports[0].nodePort}')
            echo "NodePort: $NODE_PORT"
            
            # Use only Minikube IP for the ingress host
            echo "INGRESS_IP=$MINIKUBE_IP" >> $GITHUB_ENV
            echo "Ingress IP set to: $MINIKUBE_IP"
        - name: Replace tokens in Manifests files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["${{ inputs.k8s-manifests-path }}/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: '${{ vars.DOCKER_HUB_USERNAME }}/solar-system:${{ github.sha }}'
            INGRESS_IP: ${{ env.INGRESS_IP }}              
        - name: check files
          run: |
            cat ${{ inputs.k8s-manifests-path}}/*.yaml
        - name: Create namespace and MongoDB Secret
          run: |
            # Create namespace if it doesn't exist
            kubectl create namespace development || true
            
            # Show ingress controller status
            kubectl get pods -n ingress-nginx
            kubectl -n ingress-nginx get svc ingress-nginx-controller
            
            # Create MongoDB credentials secret
            kubectl -n development create secret generic mongo-db-creds \
              --from-literal=MONGO_URI="${{ env.MONGO_URI }}" \
              --from-literal=MONGO_USERNAME="${{ vars.MONGO_USERNAME }}" \
              --from-literal=MONGO_PASSWORD="${{ secrets.mongodb_password }}" \
              --save-config \
              --dry-run=client \
              -o yaml | kubectl apply -f -

        - name: Deploy and verify
          run: |
            # Apply Kubernetes manifests
            kubectl apply -f ${{ inputs.k8s-manifests-path }} -n ${{ inputs.environment }}

            # Wait for deployment to be ready
            kubectl rollout status deployment/solar-system -n ${{ inputs.environment }} --timeout=120s

            # Verify pods are running
            kubectl get pods -n ${{ inputs.environment }}

            # Show logs of the deployed application
            kubectl logs -l app=solar-system -n ${{ inputs.environment }}

            # Test the deployed application endpoint
            echo "Testing application endpoint..."
            curl -v "http://solar-system-${{ inputs.environment }}.${{ env.INGRESS_IP }}.nip.io/live"

        - name: Expose ingress locally (port-forward) and start ngrok
          env:
            NGROK_AUTHTOKEN: ${{ secrets.ngrok_authtoken }}
            NS: ${{ vars.NAMESPACE }}   # e.g. "development"
          run: |
            set -eux
            # 1) Port-forward ingress 80 -> localhost:8080 (background)
            kubectl -n ingress-nginx port-forward svc/ingress-nginx-controller 8080:80 >/tmp/pf.log 2>&1 &

            # 2) Install & auth ngrok
            curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
            echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
            sudo apt-get update && sudo apt-get install -y ngrok
            ngrok config add-authtoken "$NGROK_AUTHTOKEN"

            # 3) Build the required Host (nip.io resolves to your minikube IP)
            IP="$(minikube ip)"
            HOST="solar-system-${NS}.${IP}.nip.io"

            # 4) Start ngrok to localhost:8080 AND rewrite Host header
            nohup ngrok http 8080 --host-header="$HOST" > /tmp/ngrok.log 2>&1 &

            # 5) Grab the public URL
            sleep 3
            curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url' > /tmp/ngrok_url
            echo "NGROK_URL=$(cat /tmp/ngrok_url)" >> $GITHUB_ENV
            echo "Public URL: $(cat /tmp/ngrok_url)"
      

        - name: Integration Testing
          run: |
            IP="$(minikube ip)"
            HOST="solar-system-${{ vars.NAMESPACE}}.${IP}.nip.io"
            echo "Running integration tests against the deployed application..."
            echo "Target Host: $HOST"
            curl http://$HOST/live -s -k | jq -r .status | grep -i live

        - name: adding a wait time
          run: |
            echo "Keeping the environment alive for additional testing..."
            for i in {1..30}; do
              echo "Wait iteration $i: Environment will remain active for testing."
              sleep 10
            done
