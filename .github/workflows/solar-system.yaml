name: Solar System Workflow
on:
  push:
    branches:
      - 'feature/*'
env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
    unit-testing:
        name: Unit Testing
        services:
           mongo-db:
             image: siddharth67/mongo-db:non-prod
             ports:
                - 27017:27017
        env:
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        strategy:
            matrix:
                node-version: [18,20]
                operating-system: [ubuntu-latest]
        runs-on: ${{ matrix.operating-system }}
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            - name: Node Js Version ${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                node-version: ${{ matrix.node-version }}
            - name: cache npm dependencies
              uses: actions/cache@v3
              with:
               path: node_modules
               key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
            - name: Install Dependencies
              run: npm install
            - name: Run Unit Tests
              run: npm test
            - name: Archive Test Results
              uses: actions/upload-artifact@v4
              with:
                name: Mocha-Test-Results ${{ matrix.operating-system }}-Node${{ matrix.node-version }}
                path: test-results.xml
                overwrite: true
    code-coverage:
        name: Code Coverage
        container:
           image: node:18
        services:
           mongo-db:
             image: siddharth67/mongo-db:non-prod
             options:
                --name mongo
        env:
            MONGO_URI: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
           # - name: Setup Node.js
           #   uses: actions/setup-node@v3
           #   with:
           #     node-version: 18
            - name: cache npm dependencies
              uses: actions/cache@v3
              with:
               path: node_modules
               key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
            - name: Install Dependencies
              run: npm install
            - name: Run Code Coverage
              continue-on-error: true
              run: npm run coverage
            - name: Archive Test results
              uses: actions/upload-artifact@v4
              with:
                name: Coverage Report
                path: coverage
                retention-days: 5

    Docker:
        name: Docker Build and Push
        needs: [unit-testing, code-coverage]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ vars.DOCKER_HUB_USERNAME }}
                password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            - name: Build the docker image
              uses: docker/build-push-action@v4
              with:
                context: .
                push: false
                tags: ${{ vars.DOCKER_HUB_USERNAME }}/solar-system:${{ github.sha }}
            - name: Docker image testing
              run: |
                docker run --name solar-system-app -d \
                    -p 3000:3000 \
                    -e MONGO_URI=${{ env.MONGO_URI }} \
                    -e MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
                    -e MONGO_PASSWORD=${{ env.MONGO_PASSWORD }} \
                    ${{ vars.DOCKER_HUB_USERNAME }}/solar-system:${{ github.sha }}

                    export IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
                    echo $IP

                    echo Testing Image URL using Wget
                    wget -q -O- http://127.0.0.0:3000/live || grep live

            - name: Push Docker image to Docker Hub
              uses: docker/build-push-action@v4
              with:
                context: .
                push: true
                tags: ${{ vars.DOCKER_HUB_USERNAME }}/solar-system:${{ github.sha }}
  
    dev-deploy: 
      needs: Docker
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Install minikube
          id: minikube
          uses: medyagh/setup-minikube@latest

        - name: Enable Minikube Addons and wait for Ingress
          run: |
            # Enable required addons
            minikube addons enable ingress
            minikube addons enable ingress-dns
            
            # Wait for ingress controller pod to be ready
            echo "Waiting for ingress-nginx-controller to be ready..."
            kubectl wait --namespace ingress-nginx \
              --for=condition=ready pod \
              --selector=app.kubernetes.io/component=controller \
              --timeout=120s
            
            # Verify ingress-nginx components
            kubectl get all -n ingress-nginx
          
        - name: Get Minikube NodePort IP and Port
          run: |
            # Get the Minikube IP
            MINIKUBE_IP=$(minikube ip)
            echo "Minikube IP: $MINIKUBE_IP"
            
            # Get the NodePort of the ingress controller
            NODE_PORT=$(kubectl -n ingress-nginx get svc ingress-nginx-controller -o jsonpath='{.spec.ports[0].nodePort}')
            echo "NodePort: $NODE_PORT"
            
            # Use only Minikube IP for the ingress host
            echo "INGRESS_IP=$MINIKUBE_IP" >> $GITHUB_ENV
            echo "Ingress IP set to: $MINIKUBE_IP"
        - name: Replace tokens in Manifests files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: '${{ vars.DOCKER_HUB_USERNAME }}/solar-system:${{ github.sha }}'
            INGRESS_IP: ${{ env.INGRESS_IP }}              
        - name: check files
          run: |
            cat kubernetes/development/*.yaml
        - name: Create namespace and MongoDB Secret
          run: |
            # Create namespace if it doesn't exist
            kubectl create namespace development || true
            
            # Show ingress controller status
            kubectl get pods -n ingress-nginx
            kubectl -n ingress-nginx get svc ingress-nginx-controller
            
            # Create MongoDB credentials secret
            kubectl -n development create secret generic mongo-db-creds \
              --from-literal=MONGO_URI="${{ env.MONGO_URI }}" \
              --from-literal=MONGO_USERNAME="${{ env.MONGO_USERNAME }}" \
              --from-literal=MONGO_PASSWORD="${{ env.MONGO_PASSWORD }}" \
              --save-config \
              --dry-run=client \
              -o yaml | kubectl apply -f -

        - name: Deploy and verify
          run: |
            # Apply Kubernetes manifests
            kubectl apply -f kubernetes/development -n development

            # Wait for deployment to be ready
            kubectl rollout status deployment/solar-system -n development --timeout=120s

            # Verify pods are running
            kubectl get pods -n development

            # Show logs of the deployed application
            kubectl logs -l app=solar-system -n development

            # Test the deployed application endpoint
            echo "Testing application endpoint..."
            curl -v "http://solar-system-development.${{ env.INGRESS_IP }}.nip.io/live"

        - name: Expose ingress locally (port-forward) and start ngrok
          env:
            NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
            NS: ${{ vars.NAMESPACE }}   # e.g. "development"
          run: |
            set -eux
            # 1) Port-forward ingress 80 -> localhost:8080 (background)
            kubectl -n ingress-nginx port-forward svc/ingress-nginx-controller 8080:80 >/tmp/pf.log 2>&1 &

            # 2) Install & auth ngrok
            curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
            echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
            sudo apt-get update && sudo apt-get install -y ngrok
            ngrok config add-authtoken "$NGROK_AUTHTOKEN"

            # 3) Build the required Host (nip.io resolves to your minikube IP)
            IP="$(minikube ip)"
            HOST="solar-system-${NS}.${MINIKUBE_IP}.nip.io"

            # 4) Start ngrok to localhost:8080 AND rewrite Host header
            nohup ngrok http 8080 --host-header="$HOST" > /tmp/ngrok.log 2>&1 &

            # 5) Grab the public URL
            sleep 3
            curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url' > /tmp/ngrok_url
            echo "NGROK_URL=$(cat /tmp/ngrok_url)" >> $GITHUB_ENV
            echo "Public URL: $(cat /tmp/ngrok_url)"

        - name: adding a wait time
          run: |
            echo "Keeping the environment alive for additional testing..."
            for i in {1..30}; do
              echo "Wait iteration $i: Environment will remain active for testing."
              sleep 10
            done
