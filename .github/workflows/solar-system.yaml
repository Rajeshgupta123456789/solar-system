name: Solar System Workflow
on:
  push:
    branches:
      - 'feature/*'
env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
    unit-testing:
        name: Unit Testing
        services:
           mongo-db:
             image: siddharth67/mongo-db:non-prod
             ports:
                - 27017:27017
        env:
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        strategy:
            matrix:
                node-version: [18,20]
                operating-system: [ubuntu-latest]
        runs-on: ${{ matrix.operating-system }}
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            - name: Node Js Version ${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                node-version: ${{ matrix.node-version }}
            - name: cache npm dependencies
              uses: actions/cache@v3
              with:
               path: node_modules
               key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
            - name: Install Dependencies
              run: npm install
            - name: Run Unit Tests
              run: npm test
            - name: Archive Test Results
              uses: actions/upload-artifact@v4
              with:
                name: Mocha-Test-Results ${{ matrix.operating-system }}-Node${{ matrix.node-version }}
                path: test-results.xml
                overwrite: true
    code-coverage:
        name: Code Coverage
        container:
           image: node:18
        services:
           mongo-db:
             image: siddharth67/mongo-db:non-prod
             options:
                --name mongo
        env:
            MONGO_URI: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
           # - name: Setup Node.js
           #   uses: actions/setup-node@v3
           #   with:
           #     node-version: 18
            - name: cache npm dependencies
              uses: actions/cache@v3
              with:
               path: node_modules
               key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
            - name: Install Dependencies
              run: npm install
            - name: Run Code Coverage
              continue-on-error: true
              run: npm run coverage
            - name: Archive Test results
              uses: actions/upload-artifact@v4
              with:
                name: Coverage Report
                path: coverage
                retention-days: 5

    Docker:
        name: Docker Build and Push
        needs: [unit-testing, code-coverage]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ vars.DOCKER_HUB_USERNAME }}
                password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            - name: Build the docker image
              uses: docker/build-push-action@v4
              with:
                context: .
                push: false
                tags: ${{ vars.DOCKER_HUB_USERNAME }}/solar-system:${{ github.sha }}
            - name: Docker image testing
              run: |
                docker run --name solar-system-app -d \
                    -p 3000:3000 \
                    -e MONGO_URI=${{ env.MONGO_URI }} \
                    -e MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
                    -e MONGO_PASSWORD=${{ env.MONGO_PASSWORD }} \
                    ${{ vars.DOCKER_HUB_USERNAME }}/solar-system:${{ github.sha }}

                    export IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
                    echo $IP

                    echo Testing Image URL using Wget
                    wget -q -O- http://127.0.0.0:3000/live || grep live

            - name: Push Docker image to Docker Hub
              uses: docker/build-push-action@v4
              with:
                context: .
                push: true
                tags: ${{ vars.DOCKER_HUB_USERNAME }}/solar-system:${{ github.sha }}
  
    dev-deploy: 
      needs: Docker
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Install minikube
          id: minikube
          uses: medyagh/setup-minikube@latest

        - name: Enable Minikube Addons and wait for Ingress
          run: |
            # Enable required addons
            minikube addons enable ingress
            minikube addons enable ingress-dns
            
            # Wait for ingress controller pod to be ready
            echo "Waiting for ingress-nginx-controller to be ready..."
            kubectl wait --namespace ingress-nginx \
              --for=condition=ready pod \
              --selector=app.kubernetes.io/component=controller \
              --timeout=120s
            
            # Verify ingress-nginx components
            kubectl get all -n ingress-nginx
          
        - name: Get Minikube NodePort IP and Port
          run: |
            # Get the Minikube IP
            MINIKUBE_IP=$(minikube ip)
            echo "Minikube IP: $MINIKUBE_IP"
            
            # Get the NodePort of the ingress controller
            NODE_PORT=$(kubectl -n ingress-nginx get svc ingress-nginx-controller -o jsonpath='{.spec.ports[0].nodePort}')
            echo "NodePort: $NODE_PORT"
            
            # Use only Minikube IP for the ingress host
            echo "INGRESS_IP=$MINIKUBE_IP" >> $GITHUB_ENV
            echo "Ingress IP set to: $MINIKUBE_IP"
        - name: Replace tokens in Manifests files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: '${{ vars.DOCKER_HUB_USERNAME }}/solar-system:${{ github.sha }}'
            INGRESS_IP: ${{ env.INGRESS_IP }}              
        - name: check files
          run: |
            cat kubernetes/development/*.yaml
        - name: Create namespace and MongoDB Secret
          run: |
            # Create namespace if it doesn't exist
            kubectl create namespace development || true
            
            # Show ingress controller status
            kubectl get pods -n ingress-nginx
            kubectl -n ingress-nginx get svc ingress-nginx-controller
            
            # Create MongoDB credentials secret
            kubectl -n development create secret generic mongo-db-creds \
              --from-literal=MONGO_URI="${{ env.MONGO_URI }}" \
              --from-literal=MONGO_USERNAME="${{ env.MONGO_USERNAME }}" \
              --from-literal=MONGO_PASSWORD="${{ env.MONGO_PASSWORD }}" \
              --save-config \
              --dry-run=client \
              -o yaml | kubectl apply -f -

        - name: Deploy and verify
          run: |
            # Apply the manifests
            kubectl apply -f kubernetes/development -n development
            
            # Wait for deployment rollout
            kubectl rollout status deployment/solar-system -n development --timeout=120s
            
            # Show all resources in namespace
            echo "=== Kubernetes Resources ==="
            kubectl get all -n development
            
            # Debug Ingress Setup
            echo -e "\n=== Ingress Controller Status ==="
            kubectl get pods -n ingress-nginx
            kubectl get svc -n ingress-nginx
            
            echo -e "\n=== Application Pod Logs ==="
            kubectl logs -l app=solar-system -n development
            
            echo -e "\n=== Service Endpoint Check ==="
            NODEPORT=$(kubectl get svc solar-system -n development -o jsonpath='{.spec.ports[0].nodePort}')
            MINIKUBE_IP=$(minikube ip)
            echo "Direct NodePort access: http://$MINIKUBE_IP:$NODEPORT"
            
            echo -e "\n=== Ingress Status ==="
            kubectl get ingress -n development
            kubectl describe ingress solar-system -n development
            
            echo -e "\n=== Testing Application Access ==="
            INGRESS_HOST="solar-system-development.${INGRESS_IP}.nip.io"
            echo "Ingress Host: $INGRESS_HOST"
            
            # Wait for pods to be ready
            echo "Waiting for pods to be ready..."
            kubectl wait --for=condition=ready pods -l app=solar-system -n development --timeout=180s
            
            # Get pod details and logs
            echo -e "\n=== Pod Details ==="
            kubectl describe pods -l app=solar-system -n development
            echo -e "\n=== Pod Logs ==="
            kubectl logs -l app=solar-system -n development
            
            # Test service directly first
            echo -e "\n=== Testing Service Directly ==="
            kubectl run curl-test --image=curlimages/curl -i --rm --restart=Never -n development -- \
              curl -v http://solar-system:3000 || true
            
            # Test NodePort access (for debugging)
            echo -e "\n=== Testing NodePort Access (Debug) ==="
            NODEPORT=$(kubectl get svc solar-system -n development -o jsonpath='{.spec.ports[0].nodePort}')
            echo "Service available on NodePort: $NODEPORT"
            
            # Test Ingress Access
            echo -e "\n=== Testing Ingress Access ==="
            echo "Testing URL: http://$INGRESS_HOST"
            for i in {1..3}; do
              echo "Attempt $i: Testing Ingress access..."
              curl -v --max-time 10 "http://$INGRESS_HOST" || true
              sleep 5
            done
            
            # Test through Ingress
            echo -e "\n=== Testing Ingress Access ==="
            for i in {1..3}; do
              echo "Attempt $i: Testing with Host header"
              curl -v --max-time 10 -H "Host: $INGRESS_HOST" http://$MINIKUBE_IP || true
              sleep 5
            done
            
            # Show ingress-nginx logs
            echo -e "\n=== Ingress Controller Logs ==="
            kubectl logs -n ingress-nginx -l app.kubernetes.io/component=controller --tail=50
            
            # Show events
            echo -e "\n=== Recent Events ==="
            kubectl get events -n development --sort-by='.lastTimestamp' | tail -10
            
        - name: Debug and keep environment running
          run: |
            # Get Minikube and service information
            MINIKUBE_IP=$(minikube ip)
            echo "Minikube IP: $MINIKUBE_IP"
            
            # Get NodePort
            NODE_PORT=$(kubectl get svc solar-system -n development -o jsonpath='{.spec.ports[0].nodePort}')
            echo "NodePort: $NODE_PORT"
            
            # Show service details
            echo "\n=== Service Details ==="
            kubectl get svc -n development solar-system -o yaml
            
            # Show pod details
            echo "\n=== Pod Details ==="
            kubectl get pods -n development
            kubectl describe pods -n development
            
            # Show pod logs
            echo "\n=== Pod Logs ==="
            kubectl logs -l app=solar-system -n development
            
            # Test direct NodePort access
            echo "\n=== Testing direct NodePort access ==="
            curl -v http://$MINIKUBE_IP:$NODE_PORT || true
            
            # Show ingress details
            echo "\n=== Ingress Details ==="
            kubectl get ingress -n development solar-system -o yaml
            
            # Show available endpoints
            echo "\n=== Available Access Points ==="
            echo "1. Direct NodePort access: http://$MINIKUBE_IP:$NODE_PORT"
            echo "2. Ingress access: http://solar-system-development.$MINIKUBE_IP.nip.io"
            
            echo "\n=== Testing DNS Resolution ==="
            INGRESS_HOST="solar-system-development.$MINIKUBE_IP.nip.io"
            nslookup $INGRESS_HOST || true
            
            echo "\nEnvironment will be kept alive for testing..."
            echo "You can try both URLs above to access the application"
            echo "Current time: $(date)"
            echo "Environment will be destroyed at: $(date -d '+5 minutes')"
            
            # Start port forwarding using kubectl in the background
            echo "\n=== Setting up port forwarding ==="
            # Use 0.0.0.0 to allow external access
            kubectl port-forward -n development svc/solar-system 8080:3000 --address 0.0.0.0 &
            PORT_FORWARD_PID=$!
            echo "Port forwarding PID: $PORT_FORWARD_PID"
            
            # Get public IP of the runner
            PUBLIC_IP=$(curl -s ifconfig.me)
            echo "\n=== Access Information ==="
            echo "------------------------------------------------"
            echo "🌎 Application URLs (available for next 5 minutes):"
            echo "1. Port forwarded URL: http://$PUBLIC_IP:8080"
            echo ""
            echo "📝 Additional Information:"
            echo "- This URL is temporary and will work only while this job is running"
            echo "- Job will remain active for 5 minutes"
            echo "- Healthchecks will run every 10 seconds"
            echo "------------------------------------------------"
            
            # Get application version or status
            echo "\n=== Application Status ==="
            curl -s http://localhost:8080 | head -n 20 || true
            
            # Periodic health checks
            for i in {1..30}; do
              echo "\nHealth check attempt $i (every 10 seconds):"
              echo "Testing service..."
              curl -s -o /dev/null -w "Service Status: %{http_code}\n" http://localhost:8080 || true
              sleep 10
            done
            
            # Cleanup port forwarding
            kill $PORT_FORWARD_PID || true
            
            # Check pod status and logs
            echo "\n=== Pod Status and Logs ==="
            POD_NAME=$(kubectl get pods -n development -l app=solar-system -o jsonpath='{.items[0].metadata.name}')
            echo "Pod Status:"
            kubectl describe pod $POD_NAME -n development
            
            echo "\nPod Logs:"
            kubectl logs $POD_NAME -n development
            
            # Verify ingress-nginx controller status
            echo "\n=== Ingress Controller Status ==="
            kubectl get pods -n ingress-nginx
            kubectl get svc -n ingress-nginx
            
            # Display Ingress details and application URL
            echo "\n=== Ingress Details ==="
            kubectl get ingress -n development
            
            echo "\n=== Application Access Information ==="
            INGRESS_HOST=$(kubectl get ingress solar-system -n development -o jsonpath='{.spec.rules[0].host}')
            echo "Application URLs:"
            echo "http://$INGRESS_HOST"
            echo "https://$INGRESS_HOST (if TLS is configured)"
            
            # Test application connectivity
            echo "\n=== Testing Application Connectivity ==="
            echo "Waiting for application to be ready..."
            for i in {1..30}; do
              if curl -k -s -o /dev/null -w "%{http_code}" "http://$INGRESS_HOST/live" | grep -q "200"; then
                echo "Application is accessible!"
                break
              fi
              echo "Attempt $i: Application not ready yet..."
              
              # Show pod and ingress status for debugging
              echo "\nCurrent Pod Status:"
              kubectl get pods -n development
              echo "\nCurrent Ingress Status:"
              kubectl describe ingress solar-system -n development
              
              if [ $i -eq 30 ]; then
                echo "Application failed to become accessible after 30 attempts"
                
                # Additional debugging information
                echo "\n=== Debug Information ==="
                echo "1. Ingress Controller Logs:"
                kubectl logs -n ingress-nginx -l app.kubernetes.io/component=controller --tail=50
                
                echo "\n2. Application Pod Events:"
                kubectl get events -n development --sort-by='.lastTimestamp' | grep solar-system
                
                echo "\n3. MongoDB Secret Check:"
                kubectl get secret mongo-db-creds -n development -o yaml
                
                exit 1
              fi
              sleep 10
            done